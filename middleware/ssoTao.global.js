
export default defineNuxtRouteMiddleware(async (to, from) => {
  // console.log("-----------------------------------------------------------------------------------------------------");

  // console.log("ðŸ”„ [Middleware] Navigating:");
  // console.log("   âž¤ From:", from.path);
  // console.log("   âž¤ To:", to.path);

  // const { data } = await useFetch(`/api/sso/session?next=${to.path}`);

  // const isSession = data.value?.data?.[0]?.isSession;



  // if (process.client){

  //   const isSessionCokiee = useCookie('isSession')
  //   const usernameCokiee = useCookie('usernameCokiee')


  //   isSession ? isSessionCokiee.value = true : isSessionCokiee.value = false

  //   // const isSessionClientLS = Localstore.get('isSession')
  //   // console.log("ðŸš€ ~ isSessionClientLS:", isSessionClientLS,isSession)
  // }




  // console.log("ðŸ§  [Middleware] Session Check:");
  // console.log("   âž¤ Session Active:", isSession);

  // // Authenticated user trying to access login page â€” redirect to home
  // if (isSession) {
  //   if (to.path === "/login" || to.path === "/login/") {
  //     console.log("ðŸš« [Middleware] Authenticated user can't access login page â€” redirecting to '/'");
  //     return await navigateTo("/");
  //   }
  // }

  // // Unauthenticated user trying to access protected page â€” redirect to login
  // if (!isSession) {
  //   if (to.path === "/profile" || to.path === "/profile/") {
  //     console.log("ðŸ”’ [Middleware] Unauthenticated user trying to access protected route â€” redirecting to '/login'");
  //     return await navigateTo("/login");
  //   }
  // }

  // console.log("âœ… [Middleware] Access granted for route:", to.path);

});
